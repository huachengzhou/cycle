<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Hugo Book</title>
    <link>https://huachengzhou.github.io/cycle/books/tags/java/</link>
    <description>Recent content in java on Hugo Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://huachengzhou.github.io/cycle/books/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java &gt; bitOperation</title>
      <link>https://huachengzhou.github.io/cycle/books/docs/java/v1/uuid_t_java_java_bitoperation/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/cycle/books/docs/java/v1/uuid_t_java_java_bitoperation/</guid>
      <description>位运算#  十进制转二进制
  正整数十进制转二进制
   正整数转成二进制。要点一定一定要记住哈：除二取余，然后倒序排列，高位补零。也就是说，将正的十进制数除以二，得到的商再除以二，依次类推直到商为零或一时为止，然后在旁边标出各步的余数，最后倒着写出来，高位补零就OK咧。
  2 |93 1──────2 |46 0────── 2 |23 1──────2 |11 1────── 2|5 1────2|2 0────1 1011101不满足8位所以高位补0 计算机内部表示数的字节单位是定长的，如8位，16位，或32位。所以，位数不够时，高位补零01011101反推回去10111016543210 ==&amp;gt; 2(6)*1+2(5)*0+2(4)*1+2(3)*1+2(2)*1+2(1)*0+2(0)*1 ==》Math.pow(2,6) + Math.pow(2,4) + Math.pow(2,3) +Math.pow(2,2)+1=932 |100 0───────2 |50 0────── 2 |25 1──────2 |12 0────── 2|6 0────2|3 1────1 011001002 |73 1──────2 |36 0────── 2 |18 0──────2 |9 1────── 2|4 0────2|2 0────1 1001001 正小数转换二进制   乘二取整，直到小数为零为止，先整为高位，后整为低位 乘二取整，截取整数，如果还没到整数那么取0，截取后剩余的小数继续乘以2然后再截取整数，直到小数为0为止，这里要注意的是每乘以2后必须截取，然后才能往后继续算</description>
    </item>
    
    <item>
      <title>java &gt; java基础总结大全</title>
      <link>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_java_java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%A4%A7%E5%85%A8/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_java_java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%A4%A7%E5%85%A8/</guid>
      <description>﻿
一、基础知识：#1、JVM、JRE和JDK的区别：# JVM(Java Virtual Machine):java虚拟机，用于保证java的跨平台的特性。 java语言是跨平台，jvm不是跨平台的。 JRE(Java Runtime Environment):java的运行环境,包括jvm+java的核心类库。	JDK(Java Development Kit):java的开发工具,包括jre+开发工具
 2、环境变量path和classpath的作用是什么？# (1)path是配置Windows可执行文件的搜索路径，即扩展名为.exe的程序文件所在的目录， 用于指定DOS窗口命令的路径。 (2)Classpath是配置class文件所在的目录，用于指定类搜索路径，JVM就是通过它来寻找该类的class类文件的。
 3、变量有什么用？为什么要定义变量？什么时候用？# 答：变量的作用：用来存储数据。 为什么要定义变量：用来不断的存放同一类型的常量，并可以重复使用
 4、&amp;amp;和&amp;amp;&amp;amp;的区别?# 答：（1）&amp;amp;&amp;amp;会出现短路，如果可以通过第一个表达式判断出整个表达式的结果，则不继续后面表达式的运算； 只能操作boolean类型数据； （2）&amp;amp;不会出现短路，将整个表达式都运算。既可以操作boolean数据还可以操作数。
 5、标示符命名规则：# 由数字(0-9)，大小写英文字母，以及_和$组成。 不能以数字开头。 不能使用关键字来自定义命名。
 6、数据类型：# (1)基本数据类型(4类8种)： 整数类型：byte、short、int、long 浮点数类型：float、double 字符类型：char 布尔类型：boolean(ture false) (2)引用数据类型： 类 接口 数组
 7、类型转换# 精度从高到低 double float long int short(char) byte (1)自动类型转换 将一个低精度&amp;mdash;高精度 (2)强制类型转换 将一个高精度&amp;mdash;低精度(精度会下降)</description>
    </item>
    
    <item>
      <title>java &gt; programStructure</title>
      <link>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_java_programstructure/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_java_programstructure/</guid>
      <description>Java的程序结构#public class HelloWorld {public static void main(String[] args) {System.out.println(&amp;quot;Hello World&amp;quot;);}} Java区分大小写 关键字public称为访问修饰符 (这些修饰符用于控制其它程序对这部分代码的访问级别) 关键字class表面Java程序的全部内容都包含在类中 关键字class后面紧跟类名   Java中定义类名的规则很宽松。名字必须以字母开头,后面可以跟字母和数字的任意组合。长度基本没有限制,但是不能使用Java保留字(例如class或public)作为类名
  标准的命名规范为(FirstSample):类名是以大写字母开头的名词。如果由多个单词组成，每个单词的第一个字母都应该大写(驼峰命名法)
  源代码的文件名必须与公共类的名字相同,并用.java作为扩展名  数据类型# String s = RandomStringUtils.random(22) ;byte[] bytes = s.getBytes();byte a1 = 35;System.out.println(a1);System.out.println(Arrays.toString(bytes));byte[] bytes1 = new byte[35] ;int[] ints = new int[35] ;for (int i = 0; i &amp;lt; 35; i++) {// bytes1[i] = (byte) RandomUtils.</description>
    </item>
    
    <item>
      <title>javaReadme</title>
      <link>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_javareadme/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_javareadme/</guid>
      <description>Java技术体系#消息队列,nosql,sql,dubbo,zookeeper,nginx,springcloud,springboot,spring,jpa,mybatisjava语法，java多线程与并发,jdbc,设计模式java基础总结大全#Java的程序结构#多线程#swing#jsp el 表达式#Java多线程编程#JVM体系#redis#apache-common工具包#Guava-common#IO#spring工具#spring常用的工具类#js_console.log用法#dom4j#Jsoup#</description>
    </item>
    
    <item>
      <title>useMath</title>
      <link>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_usemath/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huachengzhou.github.io/cycle/books/docs/java/v2/uuid_t_java_usemath/</guid>
      <description>计算机用到的数学公式#二进制十进制如何互相转换#https://jingyan.baidu.com/article/ac6a9a5e2cb17b2b653eac98.html</description>
    </item>
    
  </channel>
</rss>
